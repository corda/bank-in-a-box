# Global values
global: {}

# Setup options
setup:
  # cordaVersion defines the version that we will be deploying, 4.0 would indicate using Corda Enterprise 4.0 (the general availability (GA) version)
  # If you would like to test an unreleased version you can target the SNAPSHOT of the version, for example: "4.5-SNAPSHOT"
  # Note that this parameter is case-sensitive
  # This version also affects the Corda Firewall version
  cordaVersion: "4.6.1"
  artemis:
    # enabled is a boolean value for the above parameter
    enabled: false
  # cloudProvider defines what provider the deployment should be targeting, a lot of options are provider specific. Use 'local' for doing local deployments.
  # Accepted options: 'azure', 'aws', 'gcp', 'local'
  # Please also configure the storage options to match your intended cloud provider solution (for example if using gcp as cloud provider, disable azureFile and enable gcpPD storage)
  cloudProvider: "local"

# config defines the options that relate to the deployment but not specifically to the Corda Node
config:
  # namespace defines the Kubernetes namespace that all resources will be deployed to
  namespace: "default"
  # resourceName defines the Kubernetes resource Name that all resources will share (with some added extensions to differentiate the different resources)
  # Does not need editing unless deploying multiple nodes in the same cluster which should use unique resource names
  resourceName: "corda-oracle"
  resourceType: "oracle"
  # containerRegistry defines the Container Registry options
  dockerImage: "bank-in-a-box:0.0.1"
  storage:
    # resourceName defines the Kubernetes resource Name to use for this resource
    # Does not need editing unless deploying multiple nodes in the same cluster which should use unique resource names
    resourceName: "storage-1"
    storageClassName: "local-storage"
    # local defines the local storage options, only used if it is enabled
    local:
      # enabled is a boolean value for the above parameter
      enabled: true
      # provisioner defines the type of storage being used. See Storage Classes: https://kubernetes.io/docs/concepts/storage/storage-classes/ for more information
      provisioner: "no-provisioner"
    # azureFile defines the Azure specific storage options, only used if it is enabled
    azureFile:
      # enabled is a boolean value for the above parameter
      enabled: false
      # provisioner defines the type of storage being used. See Storage Classes: https://kubernetes.io/docs/concepts/storage/storage-classes/ for more information
      provisioner: "azure-file"
      # skuName defines the  Azure specific skuName
      skuName: "Standard_LRS"
      # skuName defines the  Azure specific location
      location: "westeurope"
      # azureStorageAccountName is only used if provisioner = azure-file, it determines the Azure storage account name
      azureStorageAccountName: ""
      # azureStorageAccountKey is only used if provisioner = azure-file, it determines the Azure storage account key
      azureStorageAccountKey: ""
    # awsEBS defines the AWS EBS specific storage options, only used if it is enabled
    awsEBS:
      # enabled is a boolean value for the above parameter
      enabled: false
      # provisioner defines the type of storage being used. See Storage Classes: https://kubernetes.io/docs/concepts/storage/storage-classes/ for more information
      provisioner: "aws-ebs"
      # type defines the  AWS specific type, io1, gp2, sc1, st1, see AWS docs: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html for more information
      type: "gp2"
      # iopsPerGB defines the performance of the storage. Only for io1 volumes. I/O operations per second per GiB. AWS volume plugin multiplies this with size of requested volume to compute IOPS of the volume and caps it at 20 000 IOPS (maximum supported by AWS, see AWS docs: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html for more information
      iopsPerGB: "10"
      # fsType defines the file system type to use, default ext4
      fsType: "ext4"
      # encrypted denotes whether the EBS volume should be encrypted or not (true/false as string)
      encrypted: "false"
      # kmsKeyId defines the encryption key. This parameter is optional. The full Amazon Resource Name of the key to use when encrypting the volume. If none is supplied but encrypted is true, a key is generated by AWS. See AWS docs for valid ARN value
      kmsKeyId: ""
      # zones defines the list of zones where this resource will be available
      zones:
        # name defines the zone name where this resource will be available
        - name: "eu-west-2b"
    # gcpPD defines the Google Cloud Platform (GCP) persistent disk (GCP PD) specific storage options, only used if it is enabled
    gcpPD:
      # enabled is a boolean value for the above parameter
      enabled: false
      # provisioner defines the type of storage being used. See Storage Classes: https://kubernetes.io/docs/concepts/storage/storage-classes/ for more information
      provisioner: "gce-pd"
      # fsType defines the file system type to use, default ext4
      fsType: "ext4"
      # type defines the  GCP specific type, pd-standard is default
      type: "pd-standard"
    # node defines the storage options for the Node information
    node:
      # fileShareName defines the volume share name, with which Kubernetes will be able to map the volume to the Deployment
      # Does not need editing unless deploying multiple nodes in the same cluster which should use unique share names
      fileShareName: "node-storage"
      # size specifies the size to reserve for this volume
      size: "2Gi"
      # volumeId defines the id of the volume. This is currently only used if either AWS EBS or GCP PD is enabled
      volumeId: ""
      # volumeHost defines which local instance or EC2 instance the volume is connected to (the value can be found in AWS portal -> EC2 Instances -> Private DNS of the VM). This is currently only used if AWS EBS is enabled
      volumeHost: "docker-desktop"

# corda is the Corda specific deployment options
corda:
  # node is the options that define how to define the node.conf file which defines how the Corda Node will function
  node:
    # Values that will end up in the node.conf file
    conf:
      # legalName defines the X500 Node identity name. See https://docs.corda.net/node-naming.html#node-naming for more information
      legalName: "O=Oracle, L=London, C=GB"
      # emailAddress defines the email address of the Node administrator, preferrably an impersonal address (e.g. node-admin@business.com)
      emailAddress: ""
      # p2pPort defines the port number of inbound connections
      p2pPort: 40007
      # p2pAddress defines the public facing IP address (domain name recommended) and port number of the Node
      p2pAddress: "corda-bank-service"
      # devMode defines if Corda Node is running in developer mode or not, this setting should NEVER be enabled in a production setting!
      devMode: true
      # ssh defines the SSH access options
      ssh:
        # enabled is a boolean value for the above parameter
        enabled: true
        # sshdPort is the Node Shell access port. See https://docs.corda.net/shell.html for more information.
        sshdPort: 2224
      # rpc defines the RPC options
      rpc:
        # port is the RPC endpoint that the user interface will access to direct the CorDapp on the Corda Node
        port: 30005
        # adminPort is the RPC admin endpoint that can be used to do administrative tasks on the Corda Node, normally disabled
        adminPort: 30006
        # users defines the list of RPC users and the permissions they have. See https://docs.corda.net/clientrpc.html#granting-flow-permissions for more information
        users:
          # name defines the name of the RPC user
          - name: user1
            # password defines the password for the RPC user
            password: test
            # permissions defines the RPC permissions available. See https://docs.corda.net/clientrpc.html?highlight=rpc%20permission#rpc-permissions for more information
            permissions: ALL
      # dataSource defines the database options
      dataSource:
        # className defines which database to use
        className: "org.h2.jdbcx.JdbcDataSource"
        # url defines where to reach the database at
        url: "jdbc:h2:file:\"${baseDirectory}\"/persistence"
        # user defines the username for the access to the database
        user: "sa"
        # password defines the password for the access to the database
        password: ""
      # allowDevCorDapps defines if CorDapps that are signed with developer keys will be allowed to load or not (it clears the cordappSignerKeyFingerprintBlacklist if enabled)
      allowDevCorDapps:
        # enabled is a boolean value for the above parameter
        enabled: true

# bank in a box specific configuration
bankInABox:
  conf:
    refappNotary: "OU=R3 Corda, O=Notary, L=London, C=GB"
    oracleParty: "O=Oracle, L=London, C=GB"
    creditRatingValidityDurationHours: 12
    creditRatingHostPort: "credit-rating-server-service:8090"
    creditRatingThreshold: 400
    loanRepaymentPeriod: "P30D"